0x01(기초 코드 작성요령1)
공간복잡도 입력의 크기와 문제를 해결하는데 필요한 공가느이 상관관계 문제를 풀때 크게 중요하지 않지만
512MB = 1.2억개의 int 를 기억해두면 좋음 1.2억개를 넘는 배열이면 틀림 
실수의 저장/연산 과정에서 반드시 오차가 발생할 수 밖에 없다.
0.1+ 0.1 +0.1 != 0.3
실수자료형을 쓸 때는 반드시 double을 쓸 것 그래야지 오차가 안 생김

0x02(기초 코드 작성요령2)
STL을 함수 인자로 넘길 때 
참조자로해야지 시간복잡도가 o(N)이 된다.

char* 보다  string이 훨씬 편함

cin 공백을 포함한 문자열을 입력 받을때
getline(cin, s); 타입이 c++ string이어야함. 

ios::sync_with_stdio(false), cin.tie(0), cout.tie(0) c++ stream만 쓰는것임 c,와 c++ stream간의 동기화를 끊는 명령임.
printf와 scanf 를 섞어쓰면 절대 안됌.
endl 절대 쓰지마 '\n'만 써라.
디버거 굳이 안쓰는거 추천함 but 써도 상관은 없음.
차라리 중간중간 출력해보는거 추천.

0x03(배열)
배열을 특정값으로 초기화 할 때 for문 돌리기 무난

int a[21];
int b[21][21];

fill(a, a+21, 0); // a
for(int i=0; i <21; i++)
{
  fill(b[i], b[i]+21,0);
}

vector
range-based for loop
for(int e :v1) // e에 v1원소들이 하나씩 들어가는 for문 int&e =v1은 원본이 그대로 복사되므로 e값을 바꾸면 v1도 바뀜
  cout<< e << ' ';

  vector<int> v1(3, 5); // {5,5,5};
  cout << v1.size() << '\n'; // 3
  v1.push_back(7); // {5,5,5,7};

  vector<int> v2(2); // {0,0};
  v2.insert(v2.begin()+1, 3); // {0,3,0};

  vector<int> v3 = {1,2,3,4}; // {1,2,3,4}
  v3.erase(v3.begin()+2); // {1,2,4};

  vector<int> v4; // {}
  v4 = v3; // {1,2,4}
  cout << v4[0] << v4[1] << v4[2] << '\n';
  v4.pop_back(); // {1,2}
  v4.clear(); // {}


0x04(리스트)
아래코드를 활용할 수 있으면 문제 없다고 생각함 STL을 사용하지 못하는 코딩테스트의 경우 직접 만들어야 하지만 그런경우가 거의
없다고 함. 당장은 이걸 사용하는거에 만족하기로함.
  list<int> L = {1,2}; // 1 2
  list<int>::iterator t = L.begin(); // t는 1을 가리키는 중
  L.push_front(10); // 10 1 2
  cout << *t << '\n'; // t가 가리키는 값 = 1을 출력
  L.push_back(5); // 10 1 2 5
  L.insert(t, 6); // t가 가리키는 곳 앞에 6을 삽입, 10 6 1 2 5
  t++; // t를 1칸 앞으로 전진, 현재 t가 가리키는 값은 2
  t = L.erase(t); // t가 가리키는 값을 제거, 그 다음 원소인 5의 위치를 반환
                  // 10 6 1 5, t가 가리키는 값은 5
  cout << *t << '\n'; // 5
  for(auto i : L) cout << i << ' ';
  cout << '\n';
  for(list<int>::iterator it = L.begin(); it != L.end(); it++)
    cout << *it << ' ';

0x05(스택) FILO(First Input Last Out)

직접구현시 스택은 배열 or 연결리스트를 이용해서 구현가능 일반적으로 배열을 통해서 구현
STL stack사용하여 가능
  stack<int> S;
  S.push(10); // 10
  S.push(20); // 10 20
  S.push(30); // 10 20 30
  cout << S.size() << '\n'; // 3
  if(S.empty()) cout << "S is empty\n";
  else cout << "S is not empty\n"; // S is not empty
  S.pop(); // 10 20
  cout << S.top() << '\n'; // 20
  S.pop(); // 10
  cout << S.top() << '\n'; // 10
  S.pop(); // empty
  if(S.empty()) cout << "S is empty\n"; // S is empty
  cout << S.top() << '\n'; // runtime error 발생

