0x01(기초 코드 작성요령1)
공간복잡도 입력의 크기와 문제를 해결하는데 필요한 공가느이 상관관계 문제를 풀때 크게 중요하지 않지만
512MB = 1.2억개의 int 를 기억해두면 좋음 1.2억개를 넘는 배열이면 틀림 
실수의 저장/연산 과정에서 반드시 오차가 발생할 수 밖에 없다.
0.1+ 0.1 +0.1 != 0.3
실수자료형을 쓸 때는 반드시 double을 쓸 것 그래야지 오차가 안 생김

0x02(기초 코드 작성요령2)
STL을 함수 인자로 넘길 때 
참조자로해야지 시간복잡도가 o(N)이 된다.

char* 보다  string이 훨씬 편함

cin 공백을 포함한 문자열을 입력 받을때
getline(cin, s); 타입이 c++ string이어야함. 

ios::sync_with_stdio(false), cin.tie(0), cout.tie(0) c++ stream만 쓰는것임 c,와 c++ stream간의 동기화를 끊는 명령임.
printf와 scanf 를 섞어쓰면 절대 안됌.
endl 절대 쓰지마 '\n'만 써라.
디버거 굳이 안쓰는거 추천함 but 써도 상관은 없음.
차라리 중간중간 출력해보는거 추천.

0x03(배열)
배열을 특정값으로 초기화 할 때 for문 돌리기 무난

int a[21];
int b[21][21];

fill(a, a+21, 0); // a
for(int i=0; i <21; i++)
{
  fill(b[i], b[i]+21,0);
}

vector
range-based for loop
for(int e :v1) // e에 v1원소들이 하나씩 들어가는 for문 int&e =v1은 원본이 그대로 복사되므로 e값을 바꾸면 v1도 바뀜
  cout<< e << ' ';

  vector<int> v1(3, 5); // {5,5,5};
  cout << v1.size() << '\n'; // 3
  v1.push_back(7); // {5,5,5,7};

  vector<int> v2(2); // {0,0};
  v2.insert(v2.begin()+1, 3); // {0,3,0};

  vector<int> v3 = {1,2,3,4}; // {1,2,3,4}
  v3.erase(v3.begin()+2); // {1,2,4};

  vector<int> v4; // {}
  v4 = v3; // {1,2,4}
  cout << v4[0] << v4[1] << v4[2] << '\n';
  v4.pop_back(); // {1,2}
  v4.clear(); // {}


0x04(리스트)
아래코드를 활용할 수 있으면 문제 없다고 생각함 STL을 사용하지 못하는 코딩테스트의 경우 직접 만들어야 하지만 그런경우가 거의
없다고 함. 당장은 이걸 사용하는거에 만족하기로함.
  list<int> L = {1,2}; // 1 2
  list<int>::iterator t = L.begin(); // t는 1을 가리키는 중
  L.push_front(10); // 10 1 2
  cout << *t << '\n'; // t가 가리키는 값 = 1을 출력
  L.push_back(5); // 10 1 2 5
  L.insert(t, 6); // t가 가리키는 곳 앞에 6을 삽입, 10 6 1 2 5
  t++; // t를 1칸 앞으로 전진, 현재 t가 가리키는 값은 2
  t = L.erase(t); // t가 가리키는 값을 제거, 그 다음 원소인 5의 위치를 반환
                  // 10 6 1 5, t가 가리키는 값은 5
  cout << *t << '\n'; // 5
  for(auto i : L) cout << i << ' ';
  cout << '\n';
  for(list<int>::iterator it = L.begin(); it != L.end(); it++)
    cout << *it << ' ';

0x05(스택) FILO(First Input Last Out) STL 원소접근 불가

직접구현시 스택은 배열 or 연결리스트를 이용해서 구현가능 일반적으로 배열을 통해서 구현
STL stack사용하여 가능
  stack<int> S;
  S.push(10); // 10
  S.push(20); // 10 20
  S.push(30); // 10 20 30
  cout << S.size() << '\n'; // 3
  if(S.empty()) cout << "S is empty\n";
  else cout << "S is not empty\n"; // S is not empty
  S.pop(); // 10 20
  cout << S.top() << '\n'; // 20
  S.pop(); // 10
  cout << S.top() << '\n'; // 10
  S.pop(); // empty
  if(S.empty()) cout << "S is empty\n"; // S is empty
  cout << S.top() << '\n'; // runtime error 발생
  
 0x06(queue) FIFO(First Input First Out) STL 원소접근 불가
  queue<int> Q;
  Q.push(10); // 10
  Q.push(20); // 10 20
  Q.push(30); // 10 20 30
  cout << Q.size() << '\n'; // 3
  if(Q.empty()) cout << "Q is empty\n";
  else cout << "Q is not empty\n"; // Q is not empty
  Q.pop(); // 20 30
  cout << Q.front() << '\n'; // 20
  cout << Q.back() << '\n'; // 30
  Q.push(40); // 20 30 40
  Q.pop(); // 30 40
  cout << Q.front() << '\n'; // 30

0x07(deque) STL 원칙적으로는 시작과 끝 이외의 원소접근 불가능하나 STL 상으로 원소 접근 가능
vector의 기능을 전부포함하고 심지어 원소의 앞쪽에서 접근가능함..
둘이 어떤걸 쓸지 결정할때 조건은 앞뒤에서 모두원소를 제거하면 덱을쓰고 앞에서 원소제걸할일이없으면 굳이 덱을쓰지말아라
 deque<int> DQ;
  DQ.push_front(10); // 10
  DQ.push_back(50); // 10 50
  DQ.push_front(24); // 24 10 50
  for(auto x : DQ)cout<<x;
  cout << DQ.size() << '\n'; // 3
  if(DQ.empty()) cout << "DQ is empty\n";
  else cout << "DQ is not empty\n"; // DQ is not empty
  DQ.pop_front(); // 10 50
  DQ.pop_back(); // 10
  cout << DQ.back() << '\n'; // 10
  DQ.push_back(72); // 10 72
  cout << DQ.front() << '\n'; // 10
  DQ.push_back(12); // 10 72 12
  DQ[2] = 17; // 10 72 17
  DQ.insert(DQ.begin()+1, 33); // 10 33 72 17
  DQ.insert(DQ.begin()+4, 60); // 10 33 72 17 60
  for(auto x : DQ) cout << x << ' ';
  cout << '\n';
  DQ.erase(DQ.begin()+3); // 10 33 72 60
  cout << DQ[3] << '\n'; // 60
  DQ.clear(); // DQ의 모든 원소 제거

0x08스택의 활용(수식의 괄호 쌍)
괄호쌍이 만날때 해당쌍을 비워주는 방식으로 진행하다보면 결과적으로 스택이 모두비어있게됌 그 조건일때 괄호쌍 조건을 만족한다. 이 원리를 이용해서 알고리즘을 구현하면됌.
https://github.com/encrypted-def/basic-algo-lecture/blob/master/0x08/4949.cpp
위 링크 코드 참고

0x09BFS
BFS알고리즘을 이해했다면 암기하고 있는것이 좋음. 이해했으므로 하기 알고리즘 코드를 암기하였음.
#include <bits/stdc++.h>
using namespace std;
#define X first
#define Y second // pair에서 first, second를 줄여서 쓰기 위해서 사용
int board[502][502] =
{{1,1,1,0,1,0,0,0,0,0},
 {1,0,0,0,1,0,0,0,0,0},
 {1,1,1,0,1,0,0,0,0,0},
 {1,1,0,0,1,0,0,0,0,0},
 {0,1,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0,0} }; // 1이 파란 칸, 0이 빨간 칸에 대응
bool vis[502][502]; // 해당 칸을 방문했는지 여부를 저장
int n = 7, m = 10; // n = 행의 수, m = 열의 수
int dx[4] = {1,0,-1,0};
int dy[4] = {0,1,0,-1}; // 상하좌우 네 방향을 의미
int main(void){
  ios::sync_with_stdio(0);
  cin.tie(0);
  queue<pair<int,int> > Q;
  vis[0][0] = 1; // (0, 0)을 방문했다고 명시
  Q.push({0,0}); // 큐에 시작점인 (0, 0)을 삽입.
  while(!Q.empty()){
    pair<int,int> cur = Q.front(); Q.pop();
    cout << '(' << cur.X << ", " << cur.Y << ") -> ";
    for(int dir = 0; dir < 4; dir++){ // 상하좌우 칸을 살펴볼 것이다.
      int nx = cur.X + dx[dir];
      int ny = cur.Y + dy[dir]; // nx, ny에 dir에서 정한 방향의 인접한 칸의 좌표가 들어감
      if(nx < 0 || nx >= n || ny < 0 || ny >= m) continue; // 범위 밖일 경우 넘어감
      if(vis[nx][ny] || board[nx][ny] != 1) continue; // 이미 방문한 칸이거나 파란 칸이 아닐 경우
      vis[nx][ny] = 1; // (nx, ny)를 방문했다고 명시
      Q.push({nx,ny});
    }
  }
}

BFS를 돌 때 큐에 쌓이는 원소들은 결국 반드시 거리순(오름차순)으로 쌓이게 되는 원리이다.

0x00 BFS(Breadth First Search) // 큐를 써서 너비탐색
:다차원 배열에서 각 칸을 방문할 때 너비를 우선으로 방문하는 알고리즘

0x0A DFS(Depth First Search) // 스택을 써서 깊이탐색
:다차원 배열에서 각 칸을 방문할 때 깊이를 우선으로 방문하는 알고리즘.
현재 보는 칸으로부터 추가되는 인접한 칸은 거리가 현재 보는 칸보다 1만큼 더 떨어져있다.는
성질이 DFS에서는 성립하지 않음. 거리계산에서는 DFS사용 X 결국 다차원 배열에서 굳이 BFS대신
DFS를 써야하는 일이 없다. Flood Fill은 BFS와 DFS중에서 어느 것을 써도 상관없음.

0x0B 재귀
귀납적 방식
1번 도미노가 쓰러진다. K번 도미노가 쓰러진면 K+1번 도미노도 쓰러진다.

재귀는 반복문 보다 시간적 메모리적으로 손해이지만 반복문이 너무 복잡해지면 그땐 재귀를 쓰는게 좋다.

절차지향적인 사고로 생각하지 말아야한다. 절차지향적인 사고로 생각하다보면 무간지옥에 빠진다. 
딱 귀납적으로 생각해야 한다. 귀납적인 사고를 받아 들여야 한다.
귀납적 사고 : 1번 도미노가 쓰러진다. K번 도미노가 쓰러진면 K+1번 도미노도 쓰러진다.
순서 
1.함수의정의
2.base condition
3.재귀 식

0x0C 백트래킹
현재 상태에서 가능한 모든 후보군을 따라 들어가며 탐색하는 알고리즘
재귀를 써야하나 기본적인 템플리이있고 형식이 비슷하여 해볼만한 느낌이든다.
